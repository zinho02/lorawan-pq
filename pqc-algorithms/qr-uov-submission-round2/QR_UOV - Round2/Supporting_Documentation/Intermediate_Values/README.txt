Regarding the intermediate values


(A) This folder contains the files of intermediate values for QR-UOV.
Each file contains the results and intermediate values with fixed seed and nonce values to generate keys and signatures. 

Corresponding to the security level lambda, we define the number of vinegar variables v, the number of oil variables m, the degree l of the irreducible polynomial f defining the quotient ring GF(q)[x]/(f), and the prime power q.


Contents:

Intermediate_Values                -- Intermediate values per parameter set
├─ iv_aes.zip                          -- Intermediate values for AES option
├─ iv_shake.zip                        -- Intermediate values for SHAKE option
└── README.txt   -- This file


The files of the intermediate values are as follows:

#####################################################
### security level 1
#####################################################
1v156m54l3q127
1v740m100l10q7
1v165m60l3q31
1v600m70l10q31
 
#####################################################
### security level 3
#####################################################
3v228m78l3q127
3v1100m140l10q7
3v246m87l3q31
3v890m100l10q31

#####################################################
### security level 5
#####################################################
5v306m105l3q127
5v1490m190l10q7
5v324m114l3q31
5v1120m120l10q31

File names are structured as follows: <Security Level>v<Value>m<Value>l<Value>q<Value>
Example: 1v156m54l3q127 → Security Level: 1, v: 156, m: 54, l: 3, q: 127

(B) Description of contents
(B-1) Parameters
This part describes the parameters of QR-UOV. (See also section 2 of the supporting documentation.)
  - lambda : security parameter (128, 192, or 256)
  - q : prime power
  - l : degree of the irreducible polynomial f that defines the quotient ring  GF(q)[x]/(f)
  - v : number of vinegar variables
  - m : number of oil variables
  - f : irreducible polynomial defining the quotient ring GF(q)[x]/(f)
  - W : matrix that makes Phi_f^g symmetric in M(l*l,GF(q))
  - PRG: AES or SHAKE used as PRG (See alse subsection 4.7 of the supporting documentation.)

(B-2) Fixed Random Values
This part describes random numbers in generating intermediate values for key generation, signature generation, and verification. 
All values in this part and thereafter are expressed in hexadecimal unless otherwise noted.
  - seed_pk : seed of public key pk 
  - seed_sk : seed of private key sk
  - message : message to be signed
  - nonce r : random number used in signature generation r

(B-3) KeyGen
In this part, matrices generated from seed_pk and seed_sk are shown; please refer to sections (C) and (D) for the method to generate the matrices from seed_pk and seed_sk and the notation of the matrices.
  - Pi1 : sequence of matrices {P_{i1} : i \in [1, m]} generated from seed_pk 
  - Pi2 : sequence of matrices {P_{i2} : i \in [1, m]} generated from seed_pk 
  - S' : matrix generated from seed_sk
  - Pi3 : sequence of matrices {P_{i3} : i \in [1, m]} generated from Pi1, Pi2 , S'

(B-4) Sign
This part shows the signatures and intermediate values generated from seed_pk, seed_sk, message, and nonce r. 
For the method to generate random numbers and the notation of vectors, please refer to sections (C) and (D).
  - y_input : vector set in Algorithm 2 Step 3 of the supporting documentation.
  - t : vector generated from message and nonce r in Algorithm 2 Step 15 of the supporting documentation.
  - L : matrix (see Step 10 of Algorithm 2 in the supporting documentation).
  - y_solution : vector (y_{v+1}, ...,y_n), which is one of the solutions Lx = t-u (see step 17 of Algorithm 2 in the supporting documentation).
  - u : vector (see Step 11 of Algorithm 2 in the supporting documentation). 
  - s : vector, which is a part of the signature (see Step 18 of Algorithm 2 in the supporting documentation).

(B-5) Verify
In this part, intermediate value for signature verification is shown. 
Please refer to section (D) for the notations of vectors.
  - t' : vector generated by Algorithm 3 of the supporting documentation.


(C) Generation rules
We generated intermediate values according to the following rules.
We also note that the following rules are to confirm the correctness of procedures and are Not Optimized.

(C-1) Hash function
The hash functions used for key generation, signature generation, and verification is AES128 and SHAKE128 for security level 1, AES196 and SHAKE256 for security level 3, and AES256 and SHAKE256 for security level 5.
The length of the output of these hash functions should be long enough to set each object. It is sufficient to set the length as described in subsection 4.6 of the supporting documentation.

(C-2) Generation of finite field elements
The method to generate finite field elements is described in subsections 4.6 and 4.7 of the supporting documentation.  

(C-3) Generation of Matrix
The methods to generate matrices Pi1, Pi2, and S' are described as Expand_pk and Expand_sk in subsection 4.1, Key Generation, of the supporting documentation. Expand_pk (resp. Expand_sk) generates matrices of GF(q)[x] elements from seed_pk (resp. seed_sk).

(C-4) Generation of Vectors
The method to generate a vector of GF(q) elements is provided by generating F_q elements (see (C-2)) and setting them in order starting with the first component.


(D) Notation rule
The intermediate values are expressed in hexadecimal notation according to this section.
This intermediate values in each file are presented in an easily verifiable notation for the purpose to facilitate the verification of the correctness of the implementation. 
Therefore, note that this is not an optimized representation and is redundant. 
Please refer to section 5 of the supporting documentation, Implementation Details, for an efficient way to represent public keys, private keys, and signatures.

(D-1) Notation of Matrices
(D-1-1) Matrices S', Pi1, Pi2, and Pi3 that are shown as the intermediate values consist of elements in GF(q^l).
All other matrices that are shown as the intermediate values consist of elements in GF(q).

(D-1-2) Each matrix is represented in hexadecimal as follows:
All elements are notated in hexadecimal with ceil(log_16(q)) digits, and combined in row-major order.

(D-1-3) Pi1, which consists of m matrices, is represented by notating all matrices in hexadecimal and combining them in order P_{1,1}, P_{2,1},...
Pi2 and Pi3 are represented in the same way.

For example, assuming q = 31, the hexadecimal representation of the following matrix whose elements are in GF(q) is as follows.

   [[15,  2,  6, 20],
    [ 2, 13, 20, 30],
    [ 0, 30, 29,  9],
    [30, 10,  9, 18]]
-->
   [[0f, 02, 06, 14],
    [02, 0e, 14, 1e],
    [00, 1e, 1d, 09],
    [1e, 0a, 09, 12]]
--> 0f|02|06|14|02|0e|14|1e|00|1e|1d|09|1e|0a|09|12
--> 0f020614020e141e001e1d091e0a0912

For example, assuming q = 7, the hexadecimal representation of the following matrix whose elements are in GF(q^l) is as follows.

  [[    2+2x  ,      x   ],
   [ 3+5x+2x^2, 3+5x+6x^2]]
-->
  [[ 2+2x+0x^2, 0+1x+0x^2],
   [ 3+5x+2x^2, 3+5x+6x^2]]
-->
  [[ 2,2,0,0,1,0 ],
   [ 3,5,2,3,5,6 ]]
--> 2|2|0|0|1|0|3|5|2|3|5|6
--> 220010352356

(D-2) Notation of vectors
All vectors that are shown as the intermediate values consist of elements in GF(q). All elements are notated in hexadecimal with ceil(log_16(q)) digits and combined in order starting with the first component.
